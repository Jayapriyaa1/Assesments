# -*- coding: utf-8 -*-
"""LVADSUSR91_JAYAPRIYAA_R_G_lab4_ra.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_MG9xZtUmEWUY0RlinZVRFagLA9Ol3uR
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.cluster import KMeans
from sklearn.ensemble import IsolationForest
from sklearn.preprocessing import LabelEncoder, MinMaxScaler, StandardScaler
from sklearn.model_selection import train_test_split,cross_val_score
from sklearn.metrics import mean_squared_error, accuracy_score, confusion_matrix, recall_score, f1_score, precision_score,silhouette_score, davies_bouldin_score, calinski_harabasz_score,mean_absolute_error, mean_squared_error, r2_score
import warnings
warnings.filterwarnings("ignore")

"""Read Data"""

df = pd.read_csv('/content/anomaly_train.csv')

"""Data preprocessing"""

n=df.isnull().sum()
print('Null values in the dataset:\n',n)

dd=df[df.duplicated()]
print('Duplicate rows in the datset:\n',dd)

"""Feature Engineering
No feature engineeering is needed

Exploratory Data Analysis (EDA)
"""

#Describing Data
print('Head of the dataset:\n',df.head())
print('Tail of the dataset:\n',df.tail())
print('Description of the dataset:\n',df.describe())
print('Columns of the dataset:\n',df.columns)
print('Shape of the data:\n',df.shape)



# Visualization
from matplotlib import pyplot as plt
_df_21['TransactionID'].plot(kind='hist', bins=20, title='TransactionID')
plt.gca().spines[['top', 'right',]].set_visible(False)


from matplotlib import pyplot as plt
df.plot(kind='scatter', x='Amount', y='Type', s=32, alpha=.8)
plt.gca().spines[['top', 'right',]].set_visible(False)
plt.show()

from matplotlib import pyplot as plt
_df_23['Type'].plot(kind='hist', bins=20, title='Type')
plt.gca().spines[['top', 'right',]].set_visible(False)

"""Label Encoding for Categorical Columns"""

categorical_cols = df.select_dtypes(include=['object']).columns.tolist()


label_encoder = LabelEncoder()
for col in categorical_cols:
    df[col] = label_encoder.fit_transform(df[col])
df.head()

"""Anomaly Detection Algorithm

"""

#Exclude date and time column
X = df.drop(['Time'], axis=1)

# Feature Scaling
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
# Anomaly Detection using Isolation Forest
outlier_detector = IsolationForest(contamination=0.05, random_state=42)
outliers = outlier_detector.fit_predict(X_scaled)
#Flag Anomalies
df['anomaly_flag'] = np.where(outliers == -1, 'Anomaly', 'Normal')


print("Flagged Anomalies:")
print(df[df['anomaly_flag'] == 'Anomaly'])