# -*- coding: utf-8 -*-
"""LVADSUSR91_JAYAPRIYAA_R_G_lab1_ra.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XAV7INyELj7qHD-Y-XC_MJ6-k2NKs-yV
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.cluster import KMeans
from sklearn.ensemble import IsolationForest
from sklearn.preprocessing import LabelEncoder, MinMaxScaler, StandardScaler
from sklearn.model_selection import train_test_split,cross_val_score
from sklearn.metrics import mean_squared_error, accuracy_score, confusion_matrix, recall_score, f1_score, precision_score,silhouette_score, davies_bouldin_score, calinski_harabasz_score,mean_absolute_error, mean_squared_error, r2_score
import warnings
warnings.filterwarnings("ignore")

"""Read Data"""

df=pd.read_csv('/content/Fare prediction.csv')
print(df)

"""Data Processing"""

#Handling null values and duplicates
n=df.isnull().sum()
print('Null values in the dataset:\n',n)

dd=df[df.duplicated()]
print('Duplicate rows in the datset:\n',dd)

# Perform Label Encoding for the 'origin' column
label_encoder = LabelEncoder()

# Transform 'key' column
df['key'] = label_encoder.fit_transform(df['key'])

# Transform 'pickup_datetime' column
df['pickup_datetime'] = label_encoder.fit_transform(df['pickup_datetime'])
#Label encoding is not needed because of absence of categorical values

# Replace missing values with median for numeric columns
imputer = SimpleImputer(strategy='median')
numeric_cols = ['key','pickup_datetime','fare_amount','pickup_longitude','pickup_latitude','dropoff_longitude','dropoff_latitude','passenger_count']
df[numeric_cols] = imputer.fit_transform(df[numeric_cols])

"""EDA"""

#Describing Data
print('Head of the dataset:\n',df.head())
print('Tail of the dataset:\n',df.tail())
print('Description of the dataset:\n',df.describe())
print('Columns of the dataset:\n',df.columns)
print('Shape of the data:\n',df.shape)


#Viz
from matplotlib import pyplot as plt
df.plot(kind='scatter', x='fare_amount', y='pickup_longitude', s=32, alpha=.8)
plt.gca().spines[['top', 'right',]].set_visible(False)

from matplotlib import pyplot as plt
import seaborn as sns
def _plot_series(series, series_name, series_index=0):
  palette = list(sns.palettes.mpl_palette('Dark2'))
  xs = series['pickup_datetime']
  ys = series['key']

  plt.plot(xs, ys, label=series_name, color=palette[series_index % len(palette)])

fig, ax = plt.subplots(figsize=(10, 5.2), layout='constrained')
df_sorted = _df_8.sort_values('pickup_datetime', ascending=True)
_plot_series(df_sorted, '')
sns.despine(fig=fig, ax=ax)
plt.xlabel('pickup_datetime')
_ = plt.ylabel('key')

"""Model Training"""

# Features and target selection
X = df.drop(['key'], axis=1)  # Excluding 'key' as it's not useful for modeling
y = df['fare_amount']

# Train test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Feature Scaling
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)
# Model Training
regression_model = LinearRegression()
regression_model.fit(X_train_scaled, y_train)

"""Model Evaluation"""

# Predict on test set
y_pred = regression_model.predict(X_test_scaled)

# Model Evaluation Metrics
mse = mean_squared_error(y_test, y_pred)
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("Mean Squared Error:", mse)
print("Mean Absolute Error:", mae)
print("R-squared:", r2)