# -*- coding: utf-8 -*-
"""LVADSUSR91_JAYAPRIYAA_lab4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jVTAHIT3RhLpV6DyYjGr5Pw_48NaPLbU
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.cluster import KMeans
from sklearn.ensemble import IsolationForest
from sklearn.preprocessing import LabelEncoder, MinMaxScaler, StandardScaler
from sklearn.decomposition import PCA
from sklearn.model_selection import train_test_split,cross_val_score
from sklearn.metrics import mean_squared_error, accuracy_score, confusion_matrix, recall_score, f1_score, precision_score,silhouette_score, davies_bouldin_score, calinski_harabasz_score,mean_absolute_error, mean_squared_error, r2_score
import warnings
warnings.filterwarnings("ignore")

"""1 Read Data"""

df=pd.read_csv('/content/social_network (1).csv')

"""2 Data Preprocessing"""

#Handling missing values
null=df.isnull().sum()
print('Null values in the dataset:\n',null)
print('total number of duplicated rows',df.duplicated().sum())
df=df.dropna()
print('Null values in the dataset after cleaning:\n',df.isnull().sum())


#Handling outliers
plt.figure(figsize=(20,15))
sns.boxplot(df)
plt.show()

"""3 EDA"""

#Describing Data
print('Head of the dataset:\n',df.head())
print('Information of the dataset:\n',df.info())
print('Description of the dataset:\n',df.describe())
print('Correleation of features:\n',df.corr())

#visualisation

_df_4.groupby('account_creation_date').size().plot(kind='barh', color=sns.palettes.mpl_palette('Dark2'))
plt.gca().spines[['top', 'right',]].set_visible(False)
plt.show()

df.plot(kind='scatter', x='posting_activity', y='social_connections', s=32, alpha=.8)
plt.gca().spines[['top', 'right',]].set_visible(False)
plt.show()


df.plot(kind='scatter', x='login_activity', y='posting_activity', s=32, alpha=.8)
plt.gca().spines[['top', 'right',]].set_visible(False)
plt.show()

#Label encoding
categorical_cols = df.select_dtypes(include=['object']).columns.tolist()
label_encoder = LabelEncoder()
for col in categorical_cols:
    df[col] = label_encoder.fit_transform(df[col])

#Normalisation
X = df.drop(['user_id', 'account_creation_date'], axis=1)
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
outlier_detector = IsolationForest(contamination=0.05, random_state=42)
outliers = outlier_detector.fit_predict(X_scaled)
df['anomaly_flag'] = np.where(outliers == -1, 'Anomaly', 'Normal')

print(df[df['anomaly_flag'] == 'Anomaly'])