# -*- coding: utf-8 -*-
"""LVADSUSR91_JAYAPRIYAA_FA_lab3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ULqLdJDvtFGZ7DGXj2esB6_O6HB_3VfO
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.cluster import KMeans
from sklearn.ensemble import IsolationForest
from sklearn.preprocessing import LabelEncoder, MinMaxScaler, StandardScaler
from sklearn.decomposition import PCA
from sklearn.model_selection import train_test_split,cross_val_score
from sklearn.metrics import mean_squared_error, accuracy_score, confusion_matrix, recall_score, f1_score, precision_score,silhouette_score, davies_bouldin_score, calinski_harabasz_score,mean_absolute_error, mean_squared_error, r2_score
import warnings
warnings.filterwarnings("ignore")

"""1 Read Data"""

df=pd.read_csv('/content/seeds.csv')

df.head()

"""2 Data Processing"""

#Handling null values and duplicates
null=df.isnull().sum()
print('Null values in the dataset:\n',null)
print('total number of duplicated rows',df.duplicated().sum())
df=df.dropna()
df.interpolate()


#Handling outliers
plt.figure(figsize=(20,15))
sns.boxplot(df)
plt.show()

q1=df['Compactness'].quantile(0.25)
q3=df['Compactness'].quantile(0.75)
iqr=q3-q1
l_limit=q1-(iqr*1.5)
u_limit=q3+(iqr*1.5)
df=df[(df['Compactness']>l_limit) & (df['Compactness']<u_limit)]

q1=df['Asymmetry coefficient'].quantile(0.25)
q3=df['Asymmetry coefficient'].quantile(0.75)
iqr=q3-q1
l_limit=q1-(iqr*1.5)
u_limit=q3+(iqr*1.5)
df=df[(df['Asymmetry coefficient']>l_limit) & (df['Asymmetry coefficient']<u_limit)]

"""3 EDA"""

#Describing Data
print('Head of the dataset:\n',df.head())
print('Information of the dataset:\n',df.info())
print('Description of the dataset:\n',df.describe())
print('Correleation of features:\n',df.corr())

#Visualisation
sns.heatmap(df.corr())
plt.show()

df['Length of kernel'].plot(kind='hist', bins=20, title='Length of kernel')
plt.gca().spines[['top', 'right',]].set_visible(False)
plt.show()

df.plot(kind='scatter', x='Compactness', y='Length of kernel', s=32, alpha=.8)
plt.gca().spines[['top', 'right',]].set_visible(False)
plt.show()

#Elbow method
l=[]
pca=PCA(n_components=2)
df_pca_scaled=pca.fit_transform(df)
scaler=MinMaxScaler()
df_scaled=scaler.fit_transform(df_pca_scaled)
for i in range(1,11):
  ml=KMeans(n_clusters=i)
  op=ml.fit_predict(df_scaled)
  inertia_score=ml.inertia_
  l.append(inertia_score)
plt.plot(range(1,11),l,marker='o')

"""4 Model Training"""

ml=KMeans(n_clusters=3)
y_pred=ml.fit_predict(df_scaled)
labels=ml.labels_
centroids=ml.cluster_centers_
plt.scatter(df_scaled[:,0],df_scaled[:,1],c=labels)
plt.scatter(centroids[:,0],centroids[:,1],marker='X',color='blue')

"""5 Model evaluation"""

print('Silhouette Score:',silhouette_score(df_scaled,y_pred))
print('\nDavies Bouldin Score:',davies_bouldin_score(df_scaled,y_pred))
print('\ncalinski_harabasz_score:',calinski_harabasz_score(df_scaled,y_pred))