# -*- coding: utf-8 -*-
"""LVADSUSR91_Jayapriyaa_lab1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14mvIHS6iqGDEbLdjBuY9QVk9edFRdkVb
"""

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, mean_squared_error, precision_score, f1_score, recall_score, confusion_matrix, silhouette_score, davies_bouldin_score, calinski_harabasz_score
import time
from sklearn.preprocessing import LabelEncoder, MinMaxScaler
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from xgboost import XGBClassifier
from sklearn.cluster import KMeans
import warnings
warnings.filterwarnings('ignore')

df=pd.read_csv('/content/winequality-red.csv')

print(df.isnull().sum())#sum of null values in each attributes
print('Total duplicated values:',df.duplicated().sum())

#a Handling missing values

df= df.fillna(method='ffill')

df=df.drop_duplicates()

#Removing Outliers for Density
q1=df['density'].quantile(0.25)
q3=df['density'].quantile(0.75)
iqr=q3-q1

l_limit=q1-(iqr*1.5)
u_limit=q3+(iqr*1.5)
df=df[(df['density']>l_limit) & (df['density']<u_limit)]

#Removing Outliers for Chlorides
q1=df['chlorides'].quantile(0.25)
q3=df['chlorides'].quantile(0.75)
iqr=q3-q1

l_limit=q1-(iqr*1.5)
u_limit=q3+(iqr*1.5)
df=df[(df['chlorides']>l_limit) & (df['chlorides']<u_limit)]

print(df)

df.info()

#b data transformation

df['quality'] = df['quality'].astype(int)

df['Target']='1'
df.loc[(df['quality']>=3) & (df['quality']<=6),'Target']='0'
print(df)

#C data encoding - all values are numeric values only

#D feature selection
X = df.drop('Target', axis=1)
y = df['Target']

#e data splitting
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)

#f Model development
from sklearn.metrics import classification_report
ml=RandomForestClassifier()
fit=ml.fit(X_train,y_train)
op=ml.predict(X_test)

#g model evaluation
acc=accuracy_score(y_test,op)
print('Accuracy of the model built',acc)
print(classification_report(y_test,op))