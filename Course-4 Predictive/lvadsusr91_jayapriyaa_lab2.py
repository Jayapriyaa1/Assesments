# -*- coding: utf-8 -*-
"""LVADSUSR91_Jayapriyaa_lab2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DWs2760Bm_9CDaDbxWEUv7BP8ru9H7Pi
"""

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, mean_squared_error, precision_score, f1_score, recall_score, confusion_matrix, silhouette_score, davies_bouldin_score, calinski_harabasz_score
import time
from sklearn.preprocessing import LabelEncoder, MinMaxScaler
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from xgboost import XGBClassifier
from sklearn.cluster import KMeans
import warnings
warnings.filterwarnings('ignore')

df=pd.read_csv('/content/Mall_Customers.csv')

print(df.isnull().sum())#sum of null values in each attributes
print('Total duplicated values:',df.duplicated().sum())

#a Data exploration and preprocessing

df=df.drop_duplicates()
#print(df)
df=df.dropna()
print(df.isnull().sum())
#Normalization
scaler=MinMaxScaler()
cs=['Age', 'Annual Income (k$)', 'Spending Score (1-100)']
df[cs]=scaler.fit_transform(df[cs])
print(df)

#feature selection
from matplotlib import pyplot as plt
df.plot(kind='scatter', x='Annual Income (k$)', y='Spending Score (1-100)', s=32, alpha=.8)
plt.gca().spines[['top', 'right',]].set_visible(False)

#b optimal number of cluster determination

# elbow method
x=df[['Annual Income (k$)','Spending Score (1-100)']]
x=x.values
l=[]
for k in range(1,11):
  ml=KMeans(n_clusters=k)
  fit=ml.fit_predict(x)
  l.append(ml.inertia_)
plt.plot(range(1,11),l,marker='o')
plt.xlabel('Data1')
plt.ylabel('Data2')
plt.title('Title')

#silhouette score

#model building
model=KMeans(n_clusters=5)
fit=model.fit_predict(x)