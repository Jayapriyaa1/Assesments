# -*- coding: utf-8 -*-
"""LVADSUSR91_Jayapriyaa_lab2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1P42vtBqjaeT-fwai3wxDu1XdgmhBC5Dp
"""

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import OneHotEncoder
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
import pandas as pd
import numpy as np

#1 Handling missing values

df=pd.read_csv('/content/booking.csv')
print(df.isnull().sum())#sum of null values in each attributes

df=df.drop_duplicates()
print('total duplicated rows:',df.duplicated().sum())

df.head()

#2 Encoding

df1 = df.copy()

# Initialize LabelEncoder
lb = LabelEncoder()

# Perform label encoding
df1['Booking_ID'] = lb.fit_transform(df['Booking_ID'])
df1['type of meal'] = lb.fit_transform(df['type of meal'])
df1['room type'] = lb.fit_transform(df['room type'])
df1['market segment type'] = lb.fit_transform(df['market segment type'])
df1['booking status'] = lb.fit_transform(df['booking status'])
print("\nDataFrame after Label Encoding:")
print(df1)

#3 Feature selection ()
X = df1.drop('booking status', axis=1)
X = X.drop('date of reservation',axis=1)

#4 Data splitting
X = df1.drop('booking status', axis=1)
X = X.drop('date of reservation',axis=1)
y = df1['booking status']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)

#5 Decision tree
print("\nDecision tree ")
Decision = DecisionTreeClassifier()
Decision.fit(X_train, y_train)
y_pred = Decision.predict(X_test)

#6 Model Evaluation

accuracy = accuracy_score(y_test, y_pred)
print("Accuracy of Decision tree", accuracy)

#5 Logistic_regression
print("\n Logistic_regression")
Logistic = LogisticRegression()
Logistic.fit(X_train, y_train)
y_pred = Logistic.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print("Accuracy of logistic regression", accuracy)